			
######################
Day 7 - 6th Apr. 2024
######################

		Docker 
		
		Kubernetes
		
		Prometheus
		
		Grafana 
		
		End-to-End CICD Pipeline Demo. 
		
		
		Containerization using Docker :::
		
		Jenkins_Master :		
			Jenkins_Slave_Nodes :
			
		Virtual Machine (VM) ::
		
			- VMs are Hardware level Virtualization.
			- VMs are created using Hypervisor
			- VMs are used to run Operating Systems
			- It consume more space and time to start the VM.
			- VMs keep on running, even if there is no task to execute.
			
		Containers :::
		
			- Containers are OS level Virtualization.
			- Containers are created using Container Engine
			- Containers are NOT used to run Operating Systems.
				- If we run the container without any task, the container will go to EXIT state immediately. 
			- It consume less space and time to start the Container Applications.
			- Containers are using the run the Applications/Tasks by default.
			- Containers run in a completely isolated namespace
			- Container uses the properties of Kernel : namespace / Control Group
			- Using Containers we can reduce the no. of VMs.
			
			
			
		Containerization :::
		
		Infra-Structure Perspective :::
		
			Jenkins_Master - Node(VM)
				Jenkins_Slave1 - Node(VM)	Maven Build 
				Jenkins_Slave2 - Node(VM)	Python Build
				Jenkins_Slave3 - Node(VM)	.Net
				Jenkins_Slave4 - Node(VM)	Angular 
				Jenkins_Slave5 - Node(VM)	NodeJS	
				
			Jenkins_Master - Node(VM) ::
				Jenkins_Slave - Node(VM) 
					Container-Engine
						C1 -  Maven Build 
						C2 -  Python Build
						C3 -  .Net
						C4 -  Angular 
						C5 -  NodeJS	
			
			Virtual Machine (VM) 				
					Container-Engine
						C0 - Jenkins_Master_Container
						C1 -  Maven Build 		
						C2 -  Python Build		
						C3 -  .Net		Developers / Deployment Perspective :::
						C4 -  Angular 			
						C5 -  NodeJS			
			
		
		Developers'/Deployment Perspective :::
		
			- Coding 								src_code 
			- Build 
			- Create Artifacts 		*.war 			mywebapp.war_v1.0
			- Unit Testing 			jdk11, tomcat8.0
					- Complete the Unit Testing.
					
					Application Artifacts - mywebapp.war_v1.0 will be deployed to target environment
				
			- Promoted to target Environments
				- QA (VM)		mywebapp.war_v1.0 -> jdk17, tomcat10
				
				- UAT (VM)
				- PROD (VM)
				
				
			Containerization : It is a process of packaging the application with all its dependencies.
			
				- Coding 								src_code 
				- Build 
				- Create Artifacts 		*.war 			mywebapp.war_v1.0/1/2/3/...........
				Create Application Package
						
							mywebapp_pkg:v1.0(mywebapp.war_v1.0,jdk11,tomcat8.0)		- Application Image 
							
							
						
						
				- Unit Testing 			Test the Application Package 
				
						- Complete the Unit Testing.
						
								
						Deploy the Application Package(mywebapp_pkg:v1.0) to target environments
						
				QA - mywebapp_pkg:v1.0	
					- Run the Application Container.
					
		Terminologies :
		
			Containerization  	# It is a process of packaging the application with all its dependencies.
			
			Container-Engine 	# It is a tool to create and Manage the Container Images and Containers
			
			Container Image 	# It is a static file that defines the properties of Container Application
								# Images are Non-Executable
								# Images composed of various Layers
								
			
			Container			# Containers are the executable units of Container Images.
			
			Container Registry 	# Is used to store/Version Control and Manage the Container Images.
								# Dockerhub is a container registry
								# hub.docker.com
			
			Container Repository # These are the sub-set of Container Registry
			
		
		Installation of Container Engine :::
				https://docs.docker.com/engine/install/ubuntu/
		
		
			apt install docker.io -y

		Misc. Docker CLI Commands

			docker images		# get the list of Container Images

			docker ps 			# Used to get the list of running containers 
			
			docker ps -a		# to get the list of all containers including the containers in stopped/Exit State.
			
		
		Create an Account in Docker Hub :		https://hub.docker.com/
		
			pull the existing docker container images and run it in local machine.
			
			docker pull <image_name>
			
			docker pull centos
			
			
			docker run <image_name>
			
			Modes of Execution :
			
				- Foreground Mode/Attached Mode 
						- It will hold that terminal till the process complete
						- It is the default Mode of Container Execution
							
							docker run centos 
						
				- Background Mode/Detached Mode
						- It will run the container in background 
							
							docker run -d centos 
				
				- Interactive Mode 
				
						- Can able to login to the node.
						
							docker run -it centos
		
			docker stop <container_id>
			
			docker start <container_id>
			
			Port Number ::
			
			docker run -it -p <host_port>:<container_port>
			
			docker run tomcat:8.0
		
		
			docker run -it -p 8088:8080 tomcat:8.0
		
			docker run -it -p <host_port>:<container_port>
			
			
			docker exec -it 4c3b3f8a1ffd bash
			
			
		Container Volumes ::
		
			Used to maintain the persistant container volume
			
			
			- Stateless Application 
					- That will never leave any trace of execution.
					
			
			- Stateful Application :
					- Application will leave the trace of execution in the form of Logs/Reports
			
			
			3-Tier Application Architecture
			
				- Front-End Layer 				C1
				
				- Application Layer 			C2 
			
				- Backend / Database Layer		C3
			
		docker volume create sa-vol1	
			
		docker run -it --mount source=sa-vol1,destination=/sa-vol1 centos bash
		
		Docker desktop.
		
		Managed services :::
		
		AWS		ECS,ECR,EKS
		Azure	ACS,ACR,AKS
		GCP		GCE,GCR,GKE
		
		
		CREATE CONTAINER IMAGES :::
		
		docker commit 	: It is used to create an image based the existing container reference.


				docker exec -it 4c3b3f8a1ffd bash
				
				Syntax:
				
				docker commit <existing_container_id> <repository_name>/<new_image_Name>:<tag_number>		
				
				docker commit 4c3b3f8a1ffd loksaieta/sa-devops-gitmvn:v1.0		
		
		docker build :	It is used to create an application image based on the adefinition
		
root@ip-172-31-36-254:~/docker_content# cat Dockerfile
FROM debian
RUN apt-get update
RUN apt-get install git -y
RUN apt-get install maven -y

		docker build -t loksai/sa-devopsimg .
		
		Publish image to container registry:
		
		
			docker login -u loksaieta
			docker push loksaieta/sa-devops-gitmvn:v1.0

Next::: 
			
Container Orchestration Tool :

	docker compose
	docker swarm
	Kubernetes

			
######################
Day 8 - 7th Apr. 2024
######################		
			
Container Orchestration Tool :

	docker compose
	docker swarm
	Kubernetes	

	Container Orchestration Tool 
		- Used to ensure high availability of Containers
		
		
			3-Tier Application Architecture		- User Registration Module
			
				- Front-End Layer 				C1,1,1
				
				- Application Layer 			C2,2,2 
			
				- Backend / Database Layer		C3,3,3		
		
		
		docker run 

		docker compose	 # Used to run mulitple containers as a service.	
		

# Manual Installation of Docker Compose :::
			
DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
mkdir -p $DOCKER_CONFIG/cli-plugins
curl -SL https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose

chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
	
docker compose version

vi docker-compose.yaml

### Yaml Files are based on Keys & Values -- key:value Pairs

version: '3'
services:
  webserv1:
    image: "tomcat:8.0"
    ports:
      - 8098:8080
  dbserv1:
    image: "redis:alpine"
	
docker compose up 

docker compose down 


Docker Swarm ::::

	Container Orchestration Tool ::::
	
		- Docker Swarm is one the Container Orchestration Tools.
		- It is meant only for Docker Containers.
		- Used to Ensure High Availability of Containers by creating Replicas of Containers.
		- We cannot Do Auto-Scaling or Load Balancing!
		
		
			Service :::
			
				Front_End			C1 / Replicas of C1 - 3 Replicas 
				
				Application_Layer	C2 
				
				Back_End (DataBase) C3 
								
