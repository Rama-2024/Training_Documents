################
16th Mar. 2024
################

2. Version Control System using GIT :::

		github ?
		
		www.github.com 		===> Remote git Repositories
		
		Repository - Collection of Folders and files. 
		
		Version Control System :
		
		What is Version Control System?
		Types of VCS 
		GIT
		GIT File Work flow
		GIT CLI Installation		
		Working with GIT CLI Commands 
		Branching Techinuqies 
		Remote Repositories - Github
		
		
		What is Version Control System?
		
		Continuous Developement ::
		
			Java_Web_Application_Project (Folder)
				- src/main
					s1.java
					s2.java
				- resource
					index.html
					
			Workspace - d:/Java_Web_Application_Project
				
			index.html 
			
			<html>
			--
			-
			-
			-
			---
			-
			</html>
			
			save index.html 
			Test 
			
			<html>
			--
			-
			-
			-
			---
			dsfsd
			fs
			df
			sd
			fsdf
			-
			</html>
			
			save index.html 
			
			Define the versioning!
			
			Version Control System ::
			
			
			save :
			
				index.html_v1.0		(tag,version_Number,commit_id)
				index.html_v1.1		(tag,version_Number,commit_id)
				index.html_v1.2		(tag,version_Number,commit_id)
				index.html_v1.3		(tag,version_Number,commit_id)
				index.html_v1.4		(tag,version_Number,commit_id)
				
					Version Control System :
					
						- It is used to version control the File Changes 
						- It is used to track the changes 
						
			Types of VCS :::
			
			
				1. Local VCS 
				
				2. Centralized VCS 
				
				3. Distributed VCS 
							- GIT is one of the distributed VCS.
							
					GIT ::
					
						- GIT is the Open-Source Distributed VCS 
						- It is used to Version Control and Track the Changes 
						- It is used to perform Parallel Development using Branching.
						
		
		Link to download and install git cli.
				https://git-scm.com/downloads
				
		Install Visual Studio Code :
				https://code.visualstudio.com/download


Next :::
		
		Git File Workflow ::: 
		
################
17th Mar. 2024
################

		GIT File Workflow :
		
		Install and use GIT CLI in Local Machine
		
		GIT Misc. Commands 


		GIT File Workflow :::
		
		
		Local Machine																		Remote Server 
		
		GIT Client																				Remote GIT Repositories(GITHUB/Azure Repo/Gitlab)
		
		Working Directory			Staging Area			Local Repository							Remote Repository
		
		index.html			----> 	index.html	  ----> 	 index.html_v0		--------->				index.html_v0
							 add 				  commit						  push
		index.html			----> 	index.html	  ----> 	 index.html_v1
		index.html			----> 	index.html	  ----> 	 index.html_v2
		
		Developers' Workload :::
		
			- Enhancement_project / Bugfixing 
			- New Project
		
		
		GIT Commands ::::
		
		
			git clone 	:	It is used to copy the entire remote repository to Local Machine 
			
			git add 	:	It is used to add the changes from working directory to staging area.
			
			git commit 	:	It is used to permanently commit the changes from staging area to local repository.
			
			git push 	: 	It is used to push the changes from local repository to remote repository
			
			git fetch / git pull :
						
							Both git fetch and git pull are used to handle the incremental changes from remote repository.
							
							Git Fetch :
								- Is used to just check for the incremental changes in remote repository, if there is any changes exist in remote repository, It will just update in Local Repository NOT in Working Directory.
		
							Git Pull :
								- Is used to check for the incremental changes in remote repository, if there is any changes exist in remote repository, It will just update in Local Repository as well as in Working Directory.

								- git pull = git fetch + git merge 
								
			git init	:	It is used to initialize a repository using git cli in local machine.
							It Create a .GIT Directory in the work space.
							It create a default branch called master/main(Default)
							
			Fork 		:	It a process of copy a remote repository to another remote repository	
							
							
			Remote Repository :
			
				github		- Remote Repository! 
				Azure Repo 
				gitlab 
				bitbucket
				aws code commit 
				
				
			Working with GIT Commands :::
			
				Install git cli in local machine :
					In windows - git bash/cmd/gui
					
				
			Maintain the Folder structure :
			
				Workspace - d:/Java_Web_Application_Project 
				
				cd d: 
				mkdir SA-Mar16-RDevOps
				cd SA-Mar16-RDevOps
				mkdir repo1
				mkdir repo1
				
				
			Local Machine														
							
			GIT Client																		
							
			Working Directory			Staging Area			Local Repository
			
			
			git init 


			git config ::	This user and email ID should be confiured before the very first commit.
			
				git local configuration 	# It is applicable within the a specific repository
				
					git config user.name "Loksai"
					
					git config user.email "loksai@asdf.com"
				
				
				git global configuration 	# It is applicable for all the repositories 
			
					git config --global user.name "Loksai"
					
					git config --global user.email "loksai@asdf.com"	
					
			echo "asdf" >> f1.txt 
			
			git add :
			
				git add <file_name> 
				
				git add <file1_name> <file2_name> 
				
				git add *.java 
				
				git add .
			
			git commit -m "Created f1.txt"
			
			
			git status			# get the current status of repo  
			
			git log 			# get the list of commits in the repo
			
				git log --oneline 
				
				git log --oneline -2
				
				git log --stat 
				
				git log --stat -2 
				
			
			git show <commit_id>		# Used to get the file and record level changes in that commit.
			
			git show <commit_id1> <commit_id1>
			
			git show -2 
			
			git ls-files 		# get the list of files being tracked by git			
			
			git diff 			# Used to get the difference between untracked and committed changes.
			
			
		How to undo the changes from staging area ::::
			
			git rm --cached file1.txt 	# Undo the Changes from staging area and take the changes back to working directory
			
			git rm -f f1.txt 			# Undo the Changes from staging area and permanently remove the file from workign directory as well.
			
			
		Undo the Committed Changes :::: 
			
			git revert 
				
			git reset 
				
				
			GIT RESET :
				- Is used to undo the changes from the repository
				- It will transfer the HEAD Pointer to a specific commit point
				- It will not create any new commit point to track the changes. 
				- It is NOT recommended to use git reset in Shared Repositories.
				
				
			Syntax :
			
				git reset <commit_id> <reset_option>
				
				
				--soft 	:::	
						It will take the changes back the staging area. The changes will be removed from Local Repository
						The changes will be availabe in both staging area and the Working Directory.
						HEAD Pointer will be moved to the specific commit point
				
				
				--mixed 						#Default 
						It will take the changes back the working directory.
						The changes will be removed from Local Repository and Staging Area.
						HEAD Pointer will be moved to the specific commit point				
				
				--hard 
						It will permanently remove the changes from Local Repository and Staging Area and working directory.
						It is a permanent Deletion.
						HEAD Pointer will be moved to the specific commit point.			
			


			GIT REVERT :
					- It is used to undo the changes from repository
					- It is same as git reset --hard 
					- Only difference is git reset, will not create any new commit point to track the changes. But git revert will create a new commit point to track the reverted changes. 
					- So, git revert is always recommended in the shared repository
				
				
				git revert <commit_id>
				
				
			
		GIT Branching Techniques :::
		
			Parallel Development
		 
			Shared Repositories ::::
		

			Branch is a logical copy of Repo.
		
			Repo :
			
				master : 	cm1,cm2,cm3 			# the default Master Branch is considered as a production version of source code.
							cm1,cm2,cm3,f1c1,f1c2,f1c3			# Upon merging changes from feature1_branch
				
				
					feature1_branch : cm1,cm2,cm3,f1c1,f1c2,f1c3
			
						git merge
						
		Git Branching Strategies :::
		
		Scenario 1 :
		
			Repo:
				master 	- 	rel1, re12, rel3 			# the default Master Branch is considered as a production version of source code.
							rel1, re12, rel3, f1c1,f1c2,f1c3		# Upon Merging from feature1_branch
				
					feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3
					
					
		Scenario 2 :
		
			Repo:
				master 	- 	rel1, re12, rel3 			# the default Master Branch is considered as a production version of source code.
							rel1, re12, rel3, Developer1_Branch_Changes
					
				
					Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
				
						feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
						
						feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 
				
		Scenario 3 :
		
			Repo:
				master 	- 	rel1, re12, rel3 			# the default Master Branch is considered as a production version of source code.
							
					Integration_Branch - rel1, re12, rel3, Developer1_Branch_Changes, Developer2_Branch_Changes
				
						Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
					
							feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
							
							feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 				
			
			
						Developer2_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
					
							feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
							
							feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 							
			
		Scenario 4 :
		
			Repo:
				master 	- 	rel1, re12, rel3 			# the default Master Branch is considered as a production version of source code.
				
							rel1, re12, rel3, rel4		# Upon merging from Release branch.
				
					Release_Branch - rel1, re12, rel3, Team1_Changes, Team2_Changes 
							
						Integration_Branch1 - rel1, re12, rel3, Developer1_Branch_Changes, Developer2_Branch_Changes						#Team1
					
							Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 				
				
				
							Developer2_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 		
				
						Integration_Branch2 - rel1, re12, rel3, Developer1_Branch_Changes, Developer2_Branch_Changes						#Team2
					
							Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 				
				
				
							Developer2_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 
								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 		


		Working with GIT Branches ::
		
			Create Branch
			
				git branch				# To get the list of branch and identify the current branch name 
				
				git branch <new_branch_name>		# To Create new Branch
				
				git checkout -b <new_branch_name>	# To Create new Branch
				
				git switch -c <new_branch_name>		# To Create new Branch

				git switch <existing_branch_name>		# To Switch from one branch to another.
				
				
			
			Repo1: 
				master : cm1,cm2,cm3 
				
					feature1 : cm1,cm2,cm3				# Current Branch
					
								cm1,cm2,cm3, f1cm1	
								
								git switch master 		# This Command shd be executed in current branch 
								
								git merge feature1 		# This Merge Command should be executed in Target Branch.
				
				
  501  cd d:
  502  cd SA-Mar16-RDevOps
  503  mkdir SA-Mar16-RDevOps
  504  cd SA-Mar16-RDevOps/
  505  clear
  506  pwd
  507  mkdir projectrepo1
  508  cd projectrepo1/
  509  clear
  510  pwd
  511  ls
  512  clear
  513  ls
  514  ls -a
  515  git init
  516  ls -a
  517  ls
  518  ls -a
  519  cd .git/
  520  ls
  521  cd ..
  522  clear
  523  ls
  524  git status
  525  ehco "Hello"
  526  echo "Hello"
  527  clear
  528  ls
  529  echo "record1" >> file1.txt
  530  ls
  531  cat file1.txt
  532  git status
  533  git add file1.txt
  534  git status
  535  git commit -m "Created file1.txt"
  536  git status
  537  git log
  538  ls
  539  echo "rec1" >> f2.txt
  540  git status
  541  git add .
  542  git status
  543  git commit -m "Created f1.txt"
  544  git log
  545  clear
  546  cd ..
  547  clear
  548  ls
  549  mkdir projectrepo2
  550  cd projectrepo2/
  551  clear
  552  git init
  553  git status
  554  ls
  555  echo "rec1" >> f1.txt
  556  ls
  557  clear
  558  ls
  559  clear
  560  ls
  561  git status
  562  git ls-files
  563  git add f1.txt
  564  git status
  565  git ls-files
  566  echo "rec1" >> d1.txt
  567  git add d1.txt
  568  git ls-files
  569  ls
  570  git status
  571  git commit -m "created some files"
  572  ls
  573  git log
  574  clear
  575  ls
  576  git staus
  577  clear
  578  git status
  579  git log
  580  clear
  581  echo "rec1" > s1.txt
  582  echo "rec1" >> l1.tx
  583  echo "rec1" >> l1.txt
  584  echo "rec1" >> l1.java
  585  echo "rec1" >> index.html
  586  echo "rec1" >> q1.doc
  587  echo "rec1" >> q1.java
  588  echo "rec1" >> q2.java
  589  echo "rec1" >> index.jsp
  590  clear
  591  ls
  592  git status
  593  git ls-files
  594  git add s1.txt l1.tx
  595  git status
  596  git add *.java
  597  git status
  598  git add .
  599  git status
  600  git ls-files
  601  git commit -m "Create dummy files"
  602  git log
  603  clear
  604  echo "rec1" >> p1.txt
  605  git add .
  606  git commit -m "Created p1.txt"
  607  echo "rec1" >> p2.txt
  608  git add .
  609  git commit -m "Created p2.txt"
  610  echo "rec1" >> p3.txt
  611  git add .
  612  git commit -m "Created p3.txt"
  613  echo "rec1" >> p4.txt
  614  git add .
  615  git commit -m "Created p4.txt"
  616  clear
  617  git log
  618  clear
  619  git log
  620  clear
  621  git log
  622  clear
  623  git log --oneline
  624  git log --oneline
  625  git show 583712b
  626  clear
  627  git log -2
  628  git log -5
  629  clea
  630  clear
  631  git log --oneline
  632  git log --oneline -2
  633  git log --stat -2
  634  git show 583712b
  635  git show -2
  636  clera
  637  clear
  638  ls -a
  639  cd .git/
  640  ls
  641  cd ..
  642  ls
  643  cat p1.txt
  644  git status
  645  git log --oneline
  646  git show 4248304
  647  clear
  648  ls
  649  git log --oneline
  650  git log --stat -1
  651  git show -1
  652  clea
  653  clear
  654  git log -2
  655  git config user.name "Loksai"
  656  git status
  657  echo "rec" >> k1.txt
  658  git add .
  659  git commit -m "created k1.txt"
  660  git log -5
  661  clear
  662  cd ..
  663  ls
  664  cd projectrepo
  665  cd projectrepo1
  666  clear
  667  git log --oneline
  668  git log
  669  echo "rec!" >> k1.txt
  670  git add .
  671  git commit -m "Created k1.txt"
  672  git log
  673  clear
  674  ls
  675  git status
  676  cat f2.txt
  677  echo "rec2" >> f2.txt
  678  echo "rec3" >> f2.txt
  679  clear
  680  git status
  681  git diff
  682  git commit -m "Updated f2.txt"
  683  git add .
  684  git commit -m "Updated f2.txt"
  685  git diff
  686  cat f2.txt
  687  clear
  688  git status
  689  ls
  690  echo "rec1" >>  j1.txt
  691  git add .
  692  clear
  693  git status
  694  git rm --cached j1.txt
  695  ls
  696  git status
  697  git ls-files
  698  clera
  699  clear
  700  git add .
  701  git ls-files
  702  git status
  703  git rm -f j1.txt
  704  ls
  705  git status
  706  git ls-files
  707  echo "rec1" >> d1.txt
  708  git add .
  709  echo "rec1" >> d2.txt
  710  git add .
  711  echo "rec1" >> d3.txt
  712  git add .
  713  clear
  714  git status
  715  git ls-files
  716  clear
  717  git status
  718  git rm --cached d3.txt
  719  git status
  720  git commit -m "Created D1 and D2 files"
  721  git status
  722  clear
  723  git log --oneline
  724  ls
  725  cd ..
  726  clear
  727  mkdir projectrepo3
  728  cd projectrepo3
  729  clear
  730  git init
  731  echo "rec1" >> s1.txt
  732  git add .
  733  git commit -m "Created s1.txt"
  734  echo "rec1" >> s2.txt
  735  git add .
  736  git commit -m "Created s2.txt"
  737  echo "rec1" >> s3.txt
  738  git add .
  739  git commit -m "Created s3.txt"
  740  echo "rec1" >> s4.txt
  741  git add .
  742  git commit -m "Created s4.txt"
  743  echo "rec1" >> s4.txt
  744  git add .
  745  git commit -m "Updated s4.txt"
  746  clear
  747  git log --oneline
  748  cat s4.txt
  749  clear
  750  ls
  751  echo "rec1" >> s5.txt
  752  git add .
  753  git commit -m "Created s5.txt"
  754  clear
  755  ls
  756  git log --oneline
  757  git ls-files
  758  git status
  759  git reset --soft 092f29e
  760  ls
  761  git ls-files
  762  git status
  763  git log --oneline
  764  git commit -m "Created s4-s5"
  765  git log --oneline
  766  git status
  767  ls
  768  git ls-files
  769  git log --oneline
  770  git reset --mixed 092f29e
  771  git status
  772  ls
  773  git ls-files
  774  git status
  775  git add .
  776  git commit -m "Created s4 and s5"
  777  git status
  778  clear
  779  git log --oneline
  780  git reset --hard 092f29e
  781  git status
  782  ls
  783  git ls-files
  784  git log --oneline
  785  git reset --hard 31138fa
  786  git log --oneline
  787  ls
  788  git log
  789  clear
  790  ls
  791  git log
  792  echo "rec1" >> s2.txt
  793  git add .
  794  git commit -m "s2"
  795  echo "rec1" >> s3.txt
  796  git add .
  797  git commit -m "s3"
  798  clear
  799  git status
  800  git log --oneline
  801  ls
  802  git revert e7d6715
  803  git log --oneline
  804  ls
  805  git revert 2023386
  806  ls
  807  git log --oneline
  808  clear
  809  cd ..
  810  mkdir projectrepo4
  811  cd projectrepo4/
  812  clear
  813  git init
  814  echo "rec1" >> s1.txt
  815  git add .
  816  git commit -m "CM1"
  817  echo "rec1" >> s2.txt
  818  git add .
  819  git commit -m "CM3"
  820  echo "rec1" >> s3.txt
  821  git add .
  822  git log
  823  git commit -m "CM4"
  824  clear
  825  git log --oneline
  826  git reset --hard 1f7a9ca
  827  git log --oneline
  828  ls
  829  echo "rec1" >> s2.txt
  830  git add .
  831  git commit -m "CM2"
  832  echo "rec1" >> s3.txt
  833  git add .
  834  git commit -m "CM3"
  835  clear
  836  git log --oneline
  837  git branch
  838  git branch feature1
  839  git branch
  840  git checkout -b feature2
  841  git branch
  842  git switch master
  843  git branch
  844  git switch -c feature3
  845  clear
  846  git switch master
  847  git log
  848  clear
  849  git log --oneline
  850  ls
  851  git status
  852  git switch feature1
  853  ls
  854  git log --oneline
  855  git status
  856  echo "rec1" >> e1.txt
  857  git add .
  858  git commit -m "feature1-cm1"
  859  git log --oneline
  860  ls
  861  git status
  862  git switch master
  863  ls
  864  git log --oneline
  865  git switch feature1
  866  ls
  867  git log --oneline
  868  git switch master
  869  l
  870  ls
  871  git merge feature1
  872  ls
  873  git log --oneline
  874  cd ..
  875  history			


Next: 
			
			Make Incremental Changes in that branch 
			
			Merge the Changes 
			
			Handling the Conflicts 
			
			rebase, squash, stash			
		
		GIT IGNORE 
		
		Remote Repositories

#######################
Day 3 - 23rd Mar. 2024
#######################


	Working with GIT Branches
	merge, merge-conflicts,
	rebase, squash, stash
	Remote Repos 
		
		Jenkins
		
			Repo1: 
				master : cm1,cm2,cm3 
				
					feature1 : cm1,cm2,cm3				# Current Branch
					
								cm1,cm2,cm3, f1cm1	
								
								git switch master 		# This Command shd be executed in current branch 
								
								git merge feature1 		# This Merge Command should be executed in Target Branch.
		
		
		Merge Conflicts :
		
			- Occurs when more than one feature branch/user try to update the same file at same record.
			
		Fix Merge Conflicts ::
		
			- Identify the file(s) causing the merge conflict 
			- Review that file content 
			- Decide which changes has to be retained/deleted from that file
			- Remove the header and footer, Update the file content and save.
			- add and commit the file in target branch. 
			
		In DevOps era, we should prevent Merge Conflict!
		
		GIT REBASE :::
		
			- Is used to keep the current branch in-sycn with target branch.
			- Is used to maintain the linear commit history
			- Is used to Prevent the Merge Conflicts in the target branch.
			
			- It is always recommended to use rebase before merge 
			
		
			git rebase <target_branch>
			
			Repo:
				master :	cm1,cm2,cm3
				
							cm1,cm2,cm3,f1cm1,f1cm2						# Upon merge from feature1 
							cm1,cm2,cm3,f2cm1,f2cm2,f1cm1,f1cm2			# Upon merge from feature2 without rebase 
							
							cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon merge from feature2 with rebase 
					
					
					feature1 : cm1,cm2,cm3
								cm1,cm2,cm3,f1cm1,f1cm2
							
							git switch master 
							
							git merge feature1 
								
								
					feature2 : cm1,cm2,cm3
								cm1,cm2,cm3,f2cm1,f2cm2
								
							git rebase master 
							
								cm1,cm2,cm3,f1cm1,f1cm2,f2cm1,f2cm2			# Upon Rebase from master 
					
							git switch master 
							
							git merge feature2
							
			git squash option::

				- It is used to combine more than one incremental commits to a single commit point.
				
				Repo:

					master : cm1,cm2 
					
							cm1,cm2,f1cm1f1cm2,3,4,5,6,7,8,9,.............,100 
							
						feature1 : cm1,cm2 
									cm1,cm2,f1cm1f1cm2,3,4,5,6,7,8,9,.............,100
							
							git rebase master 
							
							git switch master 
							
							git merge --squash feature1		
									# This command will add the changes from feature1 to the staging area of master branch 
									# It combines all the incremental commits from feature1 and create a new commit point in master/target branch.	
								
								commit the changes in target.
				
				
		Scenario 4 :
		
			Repo:
				master 	- 	rel1, re12, rel3 			# the default Master Branch is considered as a production version of source code.
				
							rel1, re12, rel3, rel4		# Upon merging from Release branch.
				
					Release_Branch - rel1, re12, rel3, Team1_Changes, Team2_Changes 
							
						Integration_Branch1 - rel1, re12, rel3, Developer1_Branch_Changes, Developer2_Branch_Changes						#Team1 REL: Mar24 / APR24
					
							Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 				
				
				
							Developer2_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 		
				
						Integration_Branch2 - rel1, re12, rel3, Developer1_Branch_Changes, Developer2_Branch_Changes						#Team2
					
							Developer1_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 				
				
				
							Developer2_Branch - rel1, re12, rel3, f1c1,f1c2,f1c3, f2c1,f2c2,f2c3
						
								feature1_branch - rel1, re12, rel3, f1c1,f1c2,f1c3		s1.txt 								
								feature2_branch - rel1, re12, rel3, f2c1,f2c2,f2c3		s1.txt 		
				
				
		git cherry-pick <commit_id>  # Is used to merge a specific commit to the target branch.
									 # As per the best practise, we never encourage to use git cherry-pick.
						
				git cherry-pick <commit_id1> <commit_id2>
				
		
	Change the Commit Message ::
	
				git commit -m "CR1001 - Updated payment function in payment module"
	
		--amend option :
		
			git commit --amend -m "Valid Message"
			
			
	GIT IGNORE :::
	
		- It is used to ignore the files from tracking.
		
		Repo:
		
		Java_Web_Application_Project :
		
			src/main
				*.java 
			src/test 
				*.java 
			resources/
				*.html
				*.jsp
			target/
				*.war 
				*.jar 
			app.properties
			build.properties
			DB_Credentials
			db_secrets
			
		Local Machine																		Remote Server
		
		Working Dir. 			Staging Area			Local Repo									Remote Repo	
			
		
		git init 
		
		create .gitignore file 		#Hidden file used by git.
		
		*.war
		*.jar 
		target/
		app.doc 
		app.md 
		
		save 
		
		add 
		
		commit 		# Initial Commit.
			
				
	

	GIT STASH :::
	
		- Is used to save the uncommitted changes to a temporary area within a repository.
		
		Repo.
			master - cm1,cm2 
			
				feature1 - cm1,cm2,.......
				
				
		Stash list --> LIFO 
		
		
		git stash save "message"				# To create a stash entry
		
		git stash list 							# To get the list of stashed entires
		
		git stash apply							# To apply/copy the latest entry from stash list back to staging area
		git stash apply	stash@{2}				# To apply/copy the specific entry from stash list back to staging area

		git stash pop							# To move the latest entry from stash list back to staging area and drop that entry from stash list.
		git stash pop stash@{2}					# To move the specific entry from stash list back to staging area  and drop that entry from stash list.
		
		git stash drop 							# To drop/delete the latest entry from stash list 
		git stash drop 	stash@{2}				# To drop/delete the specific entry from stash list 
		
		
		git stash clear							# TO clean-up the stash list.
		
		git show --stat stash@{0}
		
		git stash save "msg"
		
		git stash branch temp_branch 
		
		
		git branch -D feature1					# To Delete a branch 
		
		git branch -M main						# Rename a Branch
	
	GIT REMOTE REPOSTORIES :::
	
		Developers' Workload :
		
			Enhancement_project / Bugfix 
				
	
			git clone 	:	It is used to copy the entire remote repository to Local Machine 
			
			git add 	:	It is used to add the changes from working directory to staging area.
			
			git commit 	:	It is used to permanently commit the changes from staging area to local repository.
			
			git push 	: 	It is used to push the changes from local repository to remote repository
			
			git fetch / git pull :
						
							Both git fetch and git pull are used to handle the incremental changes from remote repository.
							
							Git Fetch :
								- Is used to just check for the incremental changes in remote repository, if there is any changes exist in remote repository, It will just update in Local Repository NOT in Working Directory.
		
							Git Pull :
								- Is used to check for the incremental changes in remote repository, if there is any changes exist in remote repository, It will just update in Local Repository as well as in Working Directory.

								- git pull = git fetch + git merge 
									
									
			
		How to create Remote Repository :::
		
		
		Remote Repositories :
			github 
			gitlab 
			bitbucket 
			azRepo 
			aws_CodeCommit 
	
	
	
			git clone <clone_url>
			
			git clone https://github.com/SA-Mar16-RDevOps/TestRepo1.git
			git remote -v 
			
			
			git push -u origin <branch_name> 
			
			git push require user credential to access remote repo.
			
			Credentials :
			
				github login_id 
				
				github Access Token  : 
	
	
			git remote add origin https://github.com/SA-Mar16-RDevOps/TestRepo2.git
			
			git remote remove origin

  501  cd d:
  502  ls
  503  cd SA-Mar16-RDevOps/
  504  clear
  505  ls
  506  mkdir demorepo1
  507  cd  demorepo1/
  508  clear
  509  git init
  510  ls
  511  git log --oneline
  512  echo "rec1" >> s1.txt
  513  git add .
  514  git commit -c "cm1"
  515  git commit -m "cm1"
  516  git log --oneline
  517  git branch feature1
  518  git branch feature2
  519  git branch
  520  git switch feature1
  521  git log --oneline
  522  cat s1.txt
  523  echo "record2 from feature1" >> s1.txt
  524  git status
  525  git add .
  526  git commit -m "f1cm1"
  527  git log --oneline
  528  cat s1.txt
  529  git switch master
  530  git merge feature1
  531  git log --oneline
  532  cat s1.txt
  533  git switch feature2
  534  git log --oneline
  535  cat s1.txt
  536  echo "record2 from feature2" >> s1.txt
  537  git add .
  538  git commit -m "f2cm1"
  539  git switch master
  540  cat s1.txt
  541  git merge feature2
  542  clear
  543  git status
  544  cat s1.txt
  545  vi s1.txt
  546  git add .
  547  git commit -m "fixed merge conflict"
  548  git log --oneline
  549  git log
  550  clear
  551  cat s1.txt
  552  git switch feature2
  553  cat s1.txt
  554  git switch feature1
  555  cat s1.txt
  556  cd ..
  557  mkdir demorepo1
  558  mkdir demorepo2
  559  cd demorepo2
  560  git init
  561  echo "rec1" >> s1.txt
  562  git add .
  563  git commit -m "cm1"
  564  echo "rec1" >> s2.txt
  565  git add .
  566  git commit -m "cm2"
  567  echo "rec1" >> s3.txt
  568  git add .
  569  git commit -m "cm3"
  570  git log --oneline
  571  git branch feature1
  572  git branch feature2
  573  git switch feature1
  574  git log --oneline
  575  echo "rec1" l1.txt
  576  git add .
  577  git commit -m "f1cm1"
  578  echo "rec1" l2.txt
  579  git add .
  580  git commit -m "f1cm2"
  581  git log --oneline
  582  ls
  583  ls
  584  git branch
  585  git switch master
  586  git log --onelne
  587  git log --oneline
  588  ls
  589  cat s1.txt
  590  git switch feature1
  591  ls
  592  git log --oneline
  593  echo "rec1" >> l1.txt
  594  git add .
  595  git commit -m "f1cm1"
  596  ls
  597  echo "rec1" >> l2.txt
  598  git add .
  599  git commit -m "f1cm2"
  600  git log --oneline
  601  git rebase master
  602  git switch master
  603  git merge feature1
  604  git log --oneline
  605  git switch feature2
  606  git log --oneline
  607  ls
  608  echo "rec1" >> k1.txt
  609  git add .
  610  git commit -m "f2cm1"
  611  echo "rec1" >> k2.txt
  612  git add .
  613  git commit -m "f2cm2"
  614  echo "rec1" >> k3.txt
  615  git add .
  616  git commit -m "f2cm3"
  617  git log --oneline
  618  git rebase master
  619  git log --oneline
  620  cclear
  621  clear
  622  git status
  623  ls
  624  git log --oneline
  625  git switch to master
  626  git switch master
  627  git merge feature2
  628  git log oneline
  629  git log --oneline
  630  git switch feature1
  631  git log --oneline
  632  git rebase master
  633  git log --oneline
  634  echo "rec1" >> w1.txt
  635  git add .
  636  git commit -m "f1c1"
  637  echo "rec1" >> w2.txt
  638  git add .
  639  git commit -m "f1c2"
  640  echo "rec1" >> w3.txt
  641  git add .
  642  git commit -m "f1c3"
  643  echo "rec1" >> w4.txt
  644  git add .
  645  git commit -m "f1c4"
  646  echo "rec1" >> w5.txt
  647  git add .
  648  git commit -m "f1c5"
  649  git log --oneline
  650  git rebase master
  651  git switch master
  652  git log --oneline
  653  ls
  654  git merge --squash feature1
  655  git status
  656  git commit -m "Combined changes from feature1"
  657  git log --oneline
  658  ls
  659  git switch feature1
  660  git log --oneline
  661  git rebase
  662  clear
  663  git log --oneline
  664  git rebase master
  665  git log --oneline
  666  clear
  667  echo "rec1" >> e1.txt
  668  git add .
  669  git commit -m "feature2 cm1"
  670  echo "rec1" >> e2.txt
  671  git add .
  672  git commit -m "feature2 cm2"
  673  clear
  674  git log --oneline
  675  git rebase master
  676  git switch master
  677  git log --oneline
  678  ls
  679  git cherry-pick d0ab1cd
  680  git log --oneline
  681  ls
  682  git switch feature1
  683  echo "rec1" >> qw.txt
  684  git add .
  685  git commit -m "asdfasdfasdfsdf"
  686  git log --oneline
  687  git status
  688  git commit -m "Valid Message"
  689  git log --oneline
  690  git commit --amend m "Valid Msg"
  691  git commit --amend -m "Valid Msg"
  692  git log --oneline
  693  echo "rec1" >> sd1.txt
  694  git add .
  695  git commit -m "asdfasfasdf"
  696  git log --oneline -3
  697  git commit --amend -m "Valid Msg1"
  698  git log --oneline -3
  699  cd ..
  700  mkdir demorepo3
  701  cd demorepo3
  702  git init
  703  ls -a
  704  vi .gitignore
  705  git add .
  706  git commit -m "Initial Commit for .gitignore"
  707  ls
  708  ls -a
  709  git log --oneline
  710  echo "rec1" >> s1.java
  711  git add .
  712  git status
  713  git commit -m "created s1.java"
  714  cat .gitignore
  715  git log --oneline
  716  echo "rec1" >> sample.doc
  717  ls
  718  git status
  719  echo "rec1" >> k1.txt
  720  git status
  721  echo "rec1" >> sample1.txt
  722  git status
  723  git add .
  724  git commit -m "adf"
  725  clear
  726  git log
  727  ls -a
  728  cat .gitignore
  729  git ls-files
  730  clear
  731  git status
  732  ls
  733  git branch
  734  git log --oneline
  735  git branch feature1
  736  echo "rec1" >> file1.txt
  737  git add .
  738  git commit -m "cm5"
  739  git switch feature1
  740  git log --oneline
  741  git status
  742  echo "rec" >> file5.txt
  743  git add .
  744  git switch feature2
  745  git branch
  746  git switch -c hotfix_branch
  747  git status
  748  git switch feature1
  749  git status
  750  git stash save "created for file1.txt"
  751  git status
  752  ls
  753  git stash list
  754  echo "rec1" >> file2.txt
  755  git add .
  756  git stash save "created for file2.txt"
  757  git stash list
  758  echo "rec1" >> file3.txt
  759  git add .
  760  git stash save "created for file3.txt"
  761  echo "rec1" >> file4.txt
  762  git add .
  763  git stash save "created for file4.txt"
  764  echo "rec1" >> file5.txt
  765  git add .
  766  git stash save "created for file5.txt"
  767  git stash list
  768  git status
  769  git stash apply
  770  ls
  771  git commit -m "created file5.txt"
  772  git status
  773  git stash list
  774  git stash drop
  775  git stash list
  776  git stash apply stash@{2}
  777  git stash list
  778  git stash drop stash@{2}
  779  git status
  780  git commit -m "Created file2.txt"
  781  git stash list
  782  git status
  783  git stash pop
  784  git stash list
  785  git status
  786  git commit -m "asdf"
  787  clear
  788  git status
  789  git stash list
  790  ls
  791  git stash clear
  792  git stash list
  793  echo "res" >> h.txt
  794  git add .
  795  git stash
  796  git stash list
  797  git show stash@{0}
  798  git show --stat stash@{0}
  799  clear
  800  git stash list
  801  git log --oneline
  802  git show --stat stash@{0}
  803  git stash list
  804  git branch
  805  git stash branch temp_feature1
  806  git switch temp_feature1
  807  git status
  808  git commit -m "h.txt"
  809  git status
  810  ls
  811  git switch feature1
  812  git merge temp_feature1
  813  git log --oneline
  814  git branch -D temp_feature1
  815  git log --oneline
  816  git branch
  817  clear
  818  git branch -M dev_feature1
  819  git branch
  820  clear
  821  cd ..
  822  git branch
  823  cd demorepo3/
  824  git branch
  825  cd ..
  826  clear
  827  mkdir remoterepos
  828  cd remoterepos/
  829  clear
  830  git clone https://github.com/SA-Mar16-RDevOps/TestRepo1.git
  831  ls
  832  cd TestRepo1/
  833  ls
  834  ls -a
  835  git switch -c localfeature1
  836  git log --oneline
  837  git switch main
  838  git log --oneline
  839  git status
  840  git remote -v
  841  git switch localfeature1
  842  git status
  843  git log --oneline
  844  echo "rec1" >> localfile1.txt
  845  git add .
  846  git commit -m "create local file1.txt"
  847  git status
  848  git log --oneline
  849  git push -u origin localfeature1
  850  git branch
  851  git switch main
  852  git log --oneline
  853  ls
  854  git fetch
  855  ls
  856  git status
  857  git pull
  858  ls
  859  git statsu
  860  git statsu
  861  git status
  862  git status
  863  git pull
  864  ls
  865  cd ..
  866  mkdir TestRepo2
  867  cd TestRepo2/
  868  git init
  869  echo "rec1" >> file1.txt
  870  git add .
  871  git commit -m "Created file1.txt"
  872  git log --oneline
  873  git remote -v
  874  git remote add origin https://github.com/SA-Mar16-RDevOps/TestRepo2.git
  875  git remote -v
  876  git branch -M main
  877  git branch -M master
  878  git push -u origin master
  879  git remote -v
  880  git remote remove origin
  881  git remote -v
  882  git remote add origin https://github.com/SA-Mar16-RDevOps/TestRepo2.git
  883  cd ..
  884  cd ..
  885  ls
  886  history

Next :::
	
	Jenkins :::
